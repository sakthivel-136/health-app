# -*- coding: utf-8 -*-
"""healthcheckerapp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HF3HtWcbGulDItoUdLITLyXfq1P2dbK5
"""
import streamlit as st
import openai
import re

# OpenAI API Key (Don't expose this in public apps)
openai.api_key = "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"  # üîê Replace with your key securely (via secrets in real deployment)

# Streamlit Page Config
st.set_page_config(page_title="Health Checker", layout="centered")

# Custom CSS
st.markdown("""
<style>
.chat-button {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 50%;
    padding: 20px;
    font-size: 24px;
    cursor: pointer;
    z-index: 9999;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    transition: transform 0.2s;
}
.chat-button:hover {
    transform: scale(1.1);
}
.chatbox {
    position: fixed;
    bottom: 90px;
    right: 20px;
    width: 360px;
    max-height: 400px;
    overflow-y: auto;
    background-color: white;
    border: 2px solid #4CAF50;
    border-radius: 10px;
    padding: 15px;
    z-index: 9998;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}
</style>
""", unsafe_allow_html=True)

# Session state init
if "show_chat" not in st.session_state:
    st.session_state.show_chat = False
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Floating button (non-functional visual)
st.markdown('<div class="chat-button">üí¨</div>', unsafe_allow_html=True)

# Toggle chat visibility
clicked = st.button("üí¨", key="chat_toggle", help="Open Chatbot", use_container_width=False)
if clicked:
    st.session_state.show_chat = not st.session_state.show_chat

# Local logic handlers (10 options simplified for now)
def handle_bmi(msg):
    h = re.search(r'(\d+\.?\d*)\s*(m|meter)', msg)
    w = re.search(r'(\d+\.?\d*)\s*(kg|kilogram)', msg)
    if h and w:
        height = float(h.group(1))
        weight = float(w.group(1))
        bmi = weight / (height ** 2)
        if bmi < 18.5:
            return f"Your BMI is {bmi:.2f}. You're underweight."
        elif bmi < 25:
            return f"Your BMI is {bmi:.2f}. Normal range!"
        elif bmi < 30:
            return f"Your BMI is {bmi:.2f}. Overweight."
        else:
            return f"Your BMI is {bmi:.2f}. Obese."
    return "Please mention height (in meters) and weight (in kg)."

def handle_hydration(msg):
    water = re.search(r'(\d+\.?\d*)\s*(l|liter)', msg)
    weight = re.search(r'(\d+\.?\d*)\s*(kg|kilogram)', msg)
    if water and weight:
        l = float(water.group(1))
        w = float(weight.group(1))
        req = w * 0.033
        if l >= req:
            return f"You drank {l}L. Required: {req:.2f}L. You're hydrated!"
        else:
            return f"You drank {l}L. Required: {req:.2f}L. Drink more!"
    return "Tell me how much water you drank and your weight."

def handle_steps(msg):
    steps = re.search(r'(\d+)\s*(steps)', msg)
    if steps:
        count = int(steps.group(1))
        if count < 5000:
            return "Try to walk more!"
        elif count < 10000:
            return "Good job, keep going!"
        else:
            return "Awesome! You're very active!"
    return "Mention your step count."

def handle_sleep(msg):
    hrs = re.search(r'(\d+)\s*(hours|hrs)', msg)
    if hrs:
        h = int(hrs.group(1))
        if h < 6:
            return "You need more sleep!"
        elif h <= 8:
            return "Great! You slept well."
        else:
            return "Too much sleep may affect productivity."
    return "Tell me how many hours you slept."

def handle_calories(msg):
    cals = re.search(r'(\d+)\s*(kcal|calories)', msg)
    if cals:
        cal = int(cals.group(1))
        if cal < 1500:
            return "Low calorie intake today!"
        elif cal < 2500:
            return "You're on track!"
        else:
            return "Too many calories today!"
    return "Mention your calorie intake."

def handle_heart_rate(msg):
    bpm = re.search(r'(\d+)\s*(bpm)', msg)
    if bpm:
        rate = int(bpm.group(1))
        if 60 <= rate <= 100:
            return f"Your heart rate ({rate} bpm) is normal."
        else:
            return f"Your heart rate is {rate} bpm. Consult a doctor if unusual."
    return "Mention your heart rate in bpm."

def handle_blood_pressure(msg):
    bp = re.search(r'(\d{2,3})/(\d{2,3})', msg)
    if bp:
        sys, dia = int(bp.group(1)), int(bp.group(2))
        if sys < 120 and dia < 80:
            return "Your BP is normal."
        elif sys < 140 or dia < 90:
            return "Prehypertension. Monitor regularly."
        else:
            return "High BP. Consult a doctor!"
    return "Mention your BP like 120/80."

def handle_stress(msg):
    if "stress" in msg or "anxious" in msg:
        return "Try deep breathing, meditation, or take a short walk."
    return ""

def handle_mood(msg):
    if "happy" in msg:
        return "Great! Stay positive!"
    elif "sad" in msg or "down" in msg:
        return "Everything will be okay. Stay strong üí™"
    return ""

def handle_exercise(msg):
    if "exercise" in msg or "workout" in msg:
        return "Exercising is a great habit. Aim for 30 mins daily!"
    return ""

# Chatbox logic
if st.session_state.show_chat:
    st.markdown('<div class="chatbox">', unsafe_allow_html=True)
    st.subheader("ü§ñ GPT + Health Assistant")

    user_input = st.text_input("Ask me a question...")

    if user_input:
        user_msg = user_input.lower()
        response = ""

        # Try local handlers first
        for handler in [handle_bmi, handle_hydration, handle_steps, handle_sleep,
                        handle_calories, handle_heart_rate, handle_blood_pressure,
                        handle_stress, handle_mood, handle_exercise]:
            response = handler(user_msg)
            if response:
                break

        # If no local handler matches, fallback to OpenAI
        if not response:
            try:
                completion = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "You are a helpful health assistant that answers questions about fitness, hydration, sleep, nutrition, and mental well-being."},
                        {"role": "user", "content": user_input}
                    ]
                )
                response = completion['choices'][0]['message']['content']
            except Exception as e:
                response = f"‚ö†Ô∏è Error contacting GPT: {str(e)}"

        # Update chat history
        st.session_state.chat_history.append(("You", user_input))
        st.session_state.chat_history.append(("Bot", response))

    # Show chat history
    for sender, msg in st.session_state.chat_history[::-1]:
        st.markdown(f"**{sender}:** {msg}")

    st.markdown('</div>', unsafe_allow_html=True)
