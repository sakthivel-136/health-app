# -*- coding: utf-8 -*-
"""healthcheckerapp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HF3HtWcbGulDItoUdLITLyXfq1P2dbK5
"""
import streamlit as st
import streamlit.components.v1 as components
import random

# Set page config
st.set_page_config(page_title="üØ™ Health Checker", layout="wide")

# Initialize session state for chat visibility
if "chat_visible" not in st.session_state:
    st.session_state.chat_visible = False

# Floating Button (no page reload)
st.markdown("""
<style>
.floating-btn {
    position: fixed;
    top: 40%;
    right: 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    font-size: 28px;
    text-align: center;
    line-height: 60px;
    box-shadow: 2px 2px 10px rgba(0,0,0,0.3);
    z-index: 9999;
    transition: transform 0.3s ease-in-out;
    cursor: pointer;
}
.floating-btn:hover {
    transform: scale(1.1);
}
</style>
""", unsafe_allow_html=True)

if st.button("üí¨", key="chat_button"):
    st.session_state.chat_visible = not st.session_state.chat_visible

st.markdown("""
<div class='floating-btn' onclick="document.querySelector('[data-testid=\"stButton\"] button').click()">üí¨</div>
""", unsafe_allow_html=True)

# App layout
left, center, right = st.columns([1, 2, 3])

# Center title
with center:
    st.markdown("""
    <div style='display: flex; justify-content: center;'>
        <h1 style='color: #4CAF50;'>Health Checker</h1>
    </div>
    """, unsafe_allow_html=True)

# Sidebar (left column) - tool selection
with left:
    st.markdown("<h2 style='margin-bottom:10px;'>üß† Tools</h2>", unsafe_allow_html=True)
    st.markdown("<div style='padding-left: 10px;'>", unsafe_allow_html=True)
    tool = st.radio("Select a health tool:", [
        "None", "BMI Calculator", "Blood Pressure Checker", "Hydration Checker",
        "Workout Calorie Estimator", "Heart Rate Monitor", "Sleep Tracker",
        "Diabetes Risk Checker", "Step Counter", "Stress Level Estimator", "Vision Check"
    ], index=0)
    st.markdown("</div>", unsafe_allow_html=True)

# Main content (right column)
with right:
    if tool == "None":
        st.markdown("""
            <marquee behavior="scroll" direction="left" scrollamount="6" style="color:#ff5722; font-size:24px; font-weight:bold;">
                When the going gets rough, the tough gets going. Everyday I‚Äôm surviving just to keep on thriving.
            </marquee>
        """, unsafe_allow_html=True)

    elif tool == "BMI Calculator":
        st.header("üÆ¢ BMI Calculator")
        height = st.number_input("Enter your height (in meters):", min_value=0.0, format="%.2f")
        weight = st.number_input("Enter your weight (in kilograms):", min_value=0.0, format="%.2f")
        if st.button("Calculate BMI"):
            if height > 0:
                bmi = weight / (height ** 2)
                st.success(f"Your BMI is: {bmi:.2f}")
                if bmi < 18.5:
                    st.info("You are underweight.")
                elif 18.5 <= bmi < 24.9:
                    st.success("You have a normal weight.")
                elif 25 <= bmi < 29.9:
                    st.warning("You are overweight.")
                else:
                    st.error("You are obese.")

# Tool placeholders for remaining tools
    elif tool == "Blood Pressure Checker":
        st.header("üß∞ Blood Pressure Checker")
        systolic = st.number_input("Enter Systolic (upper) value:", min_value=0)
        diastolic = st.number_input("Enter Diastolic (lower) value:", min_value=0)
        if st.button("Check BP"):
            if systolic < 90 or diastolic < 60:
                st.warning("Low Blood Pressure (Hypotension)")
            elif 90 <= systolic <= 120 and 60 <= diastolic <= 80:
                st.success("Normal Blood Pressure")
            elif 120 < systolic <= 139 or 80 < diastolic <= 89:
                st.warning("Prehypertension")
            else:
                st.error("High Blood Pressure (Hypertension)")

    elif tool == "Hydration Checker":
        st.header("üíß Hydration Checker")
        water_intake = st.number_input("Water intake today (in liters):", min_value=0.0, format="%.2f")
        weight = st.number_input("Your weight (in kg):", min_value=0.0, format="%.2f")
        if st.button("Check Hydration"):
            recommended = weight * 0.033
            st.info(f"Recommended: {recommended:.2f} L/day")
            if water_intake >= recommended:
                st.success("You're well hydrated!")
            else:
                st.warning("You need to drink more water.")

    elif tool == "Workout Calorie Estimator":
        st.header("üèÉ Workout Calorie Estimator")
        st.write("Estimate your calorie burn based on your activity.")

    elif tool == "Heart Rate Monitor":
        st.header("‚ù§Ô∏è Heart Rate Monitor")
        bpm = st.number_input("Enter your current BPM (Beats Per Minute):", min_value=0)
        if st.button("Check Heart Rate"):
            if bpm < 60:
                st.warning("Low heart rate")
            elif 60 <= bpm <= 100:
                st.success("Normal heart rate")
            else:
                st.error("High heart rate")

    elif tool == "Sleep Tracker":
        st.header("üõå Sleep Tracker")
        st.write("Track your daily sleep pattern and get tips.")

    elif tool == "Diabetes Risk Checker":
        st.header("üß™ Diabetes Risk Checker")
        st.write("Assess your risk based on common indicators.")

    elif tool == "Step Counter":
        st.header("üö∂ Step Counter")
        st.write("Keep count of your daily steps.")

    elif tool == "Stress Level Estimator":
        st.header("üò∞ Stress Level Estimator")
        st.write("Understand your stress levels through simple inputs.")

    elif tool == "Vision Check":
        st.header("üëÅÔ∏è Vision Check")
        st.write("Basic self-assessment for eye health.")

# Chat assistant questions per tool
chat_data = {
    "BMI Calculator": [
        "What is BMI?", "Is my BMI healthy?", "How can I reduce BMI?",
        "What BMI range is overweight?", "Is BMI same for all ages?"
    ],
    "Blood Pressure Checker": [
        "What is normal BP?", "What causes high BP?", "Is low BP dangerous?",
        "How to control BP?", "Is 130/90 high?"
    ],
    "Hydration Checker": [
        "How much water should I drink?", "Is 5L too much?", "Why hydration matters?",
        "Does weather affect water need?", "Can I drink too much water?"
    ],
    "Workout Calorie Estimator": [
        "How many calories does running burn?", "Which workout burns more?",
        "Is 30min workout enough?", "How do I calculate calories?", "What factors affect calorie burn?"
    ],
    "Heart Rate Monitor": [
        "What is normal heart rate?", "How does stress affect BPM?", "Can exercise increase BPM?",
        "When is high BPM dangerous?", "Is low BPM good?"
    ],
    "Sleep Tracker": [
        "How much sleep is enough?", "Why do I oversleep?", "Does screen time affect sleep?",
        "Can naps help?", "Tips for better sleep?"
    ],
    "Diabetes Risk Checker": [
        "What are early signs of diabetes?", "How does BMI relate to diabetes?",
        "Is diabetes genetic?", "Can diet reduce risk?", "What tests check diabetes?"
    ],
    "Step Counter": [
        "How many steps a day is ideal?", "Is walking enough exercise?", "Do steps burn calories?",
        "What if I don‚Äôt reach 10k steps?", "How to increase step count?"
    ],
    "Stress Level Estimator": [
        "What causes stress?", "How to manage stress?", "Does exercise reduce stress?",
        "Signs of chronic stress?", "Can stress affect health?"
    ],
    "Vision Check": [
        "How often to test vision?", "What is 6/6 vision?", "Does screen time affect eyes?",
        "What are signs of eye strain?", "How to keep eyes healthy?"
    ]
}

chat_answers = {
    tool: {q: f"This is a helpful answer for: {q}" for q in qs} for tool, qs in chat_data.items()
}

# Floating Chatbox
if st.session_state.chat_visible:
    st.markdown("""
        <style>
        .floating-chatbox {
            position: fixed;
            top: 30%;
            right: 90px;
            background-color: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(6px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            padding: 15px;
            width: 300px;
            box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.2);
            z-index: 9999;
            animation: slideIn 0.5s ease-out;
        }

        @keyframes slideIn {
            from { right: -350px; opacity: 0; }
            to { right: 90px; opacity: 1; }
        }
        </style>
        <div class='floating-chatbox'>
    """, unsafe_allow_html=True)

    st.markdown(f"<h4>üß† Chat Assistant</h4><p>Ask me anything about <b>{tool}</b></p>", unsafe_allow_html=True)

    if tool != "None":
        question_list = chat_data.get(tool, [])
        selected_question = st.selectbox("Choose a question:", question_list)
        if st.button("Ask", key="ask_chat"):
            answer = chat_answers.get(tool, {}).get(selected_question, "Hmm... I'm still learning about that. Please try another question!")
            st.info(f"**Answer:** {answer}")
    else:
        st.write("No tool selected.")

    st.markdown("</div>", unsafe_allow_html=True)
