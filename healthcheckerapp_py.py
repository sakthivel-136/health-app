# -*- coding: utf-8 -*-
"""healthcheckerapp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HF3HtWcbGulDItoUdLITLyXfq1P2dbK5
"""
import streamlit as st
import openai
import os
import re
from dotenv import load_dotenv

# üîí Create .env file if it doesn't exist
if not os.path.exists(".env"):
    api_key = st.text_input("Enter your OpenAI API key:", type="password")
    if api_key:
        with open(".env", "w") as f:
            f.write(f"OPENAI_API_KEY={api_key.strip()}\n")
        st.success("‚úÖ .env file created successfully. Please rerun the app.")
        st.stop()

# Load API Key from .env
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

if not openai.api_key:
    st.error("‚ùå OPENAI_API_KEY not found in .env. Please enter it above.")
    st.stop()

# Set page config
st.set_page_config(page_title="Health Checker", layout="centered")

# Custom CSS for floating chat button and chatbox
st.markdown("""
<style>
.chat-button {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 50%;
    padding: 20px;
    font-size: 24px;
    cursor: pointer;
    z-index: 9999;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    transition: transform 0.2s;
}
.chat-button:hover {
    transform: scale(1.1);
}
.chatbox {
    position: fixed;
    bottom: 90px;
    right: 20px;
    width: 360px;
    max-height: 400px;
    overflow-y: auto;
    background-color: white;
    border: 2px solid #4CAF50;
    border-radius: 10px;
    padding: 15px;
    z-index: 9998;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}
</style>
""", unsafe_allow_html=True)

# Chat state
if "show_chat" not in st.session_state:
    st.session_state.show_chat = False
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Floating chat button
if st.button("üí¨", key="chat_toggle", help="Open Chatbot"):
    st.session_state.show_chat = not st.session_state.show_chat

st.markdown('<div class="chat-button">üí¨</div>', unsafe_allow_html=True)

# Chatbox UI
if st.session_state.show_chat:
    st.markdown('<div class="chatbox">', unsafe_allow_html=True)
    st.subheader("ü§ñ Ask me something!")

    user_input = st.text_input("Type your question here...")

    def handle_bmi(q):
        h = re.search(r'(\d+\.?\d*)\s*(m|meter)', q)
        w = re.search(r'(\d+\.?\d*)\s*(kg|kilogram)', q)
        if h and w:
            height = float(h.group(1))
            weight = float(w.group(1))
            bmi = weight / (height ** 2)
            if bmi < 18.5:
                return f"Your BMI is {bmi:.2f}, which means you are underweight."
            elif bmi < 25:
                return f"Your BMI is {bmi:.2f}, which is considered normal."
            elif bmi < 30:
                return f"Your BMI is {bmi:.2f}, which indicates overweight."
            else:
                return f"Your BMI is {bmi:.2f}, you are obese."
        return "Mention height (in meters) and weight (in kg) to calculate BMI."

    def handle_hydration(q):
        water = re.search(r'(\d+\.?\d*)\s*(l|liter)', q)
        weight = re.search(r'(\d+\.?\d*)\s*(kg|kilogram)', q)
        if water and weight:
            l = float(water.group(1))
            w = float(weight.group(1))
            req = w * 0.033
            if l >= req:
                return f"You drank {l}L. Required: {req:.2f}L. You're hydrated!"
            else:
                return f"You drank {l}L. Required: {req:.2f}L. Not enough!"
        return "Tell me how much water you drank and your weight."

    def handle_steps(q):
        steps = re.search(r'(\d+)\s*(steps)', q)
        if steps:
            count = int(steps.group(1))
            if count < 5000:
                return "You need more steps!"
            elif count < 10000:
                return "Nice! Moderate activity!"
            else:
                return "Awesome! Very active!"
        return "Please mention your step count."

    def handle_chatgpt(q):
        try:
            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a health assistant that helps with BMI, hydration, and fitness."},
                    {"role": "user", "content": q}
                ]
            )
            return completion['choices'][0]['message']['content']
        except Exception as e:
            return f"‚ö†Ô∏è Error: {str(e)}"

    # Chat handling logic
    if user_input:
        msg = user_input.lower()
        if "bmi" in msg or ("height" in msg and "weight" in msg):
            response = handle_bmi(msg)
        elif "water" in msg or "hydrated" in msg:
            response = handle_hydration(msg)
        elif "steps" in msg or "walk" in msg:
            response = handle_steps(msg)
        else:
            response = handle_chatgpt(user_input)

        st.session_state.chat_history.append(("You", user_input))
        st.session_state.chat_history.append(("Bot", response))

    # Display chat history
    for sender, msg in st.session_state.chat_history[::-1]:
        st.markdown(f"**{sender}:** {msg}")

    st.markdown('</div>', unsafe_allow_html=True)
